<<<<<<< HEAD
#'cont = 'Continued_treatment',name_col='Arm',show.legend = FALSE,type =
#'"open",cex=1.25)
#'
#'
# Add ggplot layers to improve the plot's aesthetic
#'
#'  swim_plot_with_arrows+
#'ggplot2::scale_color_manual(name="Treatment",values=c("#e41a1c", "#377eb8","#4daf4a"),drop=FALSE)+
#'ggplot2::scale_fill_manual(name="Treatment",values=c("#e41a1c", "#377eb8","#4daf4a"))+
#'ggplot2::ylab('Time (Days)')
#'
#'
#'
#'
#'
#'
#' #Mapping the arrows to lines
#'
#' #Start with a base swimmer plot with lines and points
#'
#'
#' swim_plot <-
#' swimmer_plot(df=ClinicalTrial.Arm,id='id',end='End_trt',name_fill='Arm',col="black",id_order
#' = 'Arm')+ swimmer_lines(df_lines=ClinicalTrial.Response,id='id',start =
#' 'Response_start',end='Response_end',name_col='Response',size=3)+
#' swimmer_points_from_lines(df_lines=ClinicalTrial.Response,id='id',start =
#' 'Response_start',end = 'Response_end',cont =
#' 'Continued_response',name_col='Response',size=4)
#'
#'
#' # Then add arrows to the plot
#'
#'   swim_plot_with_arrows <- swim_plot+
#' swimmer_arrows(df_arrows=ClinicalTrial.Response,id='id',arrow_start='Response_end',
#' cont = 'Continued_response',name_col='Response',show.legend = FALSE,type =
#' "open",cex=1.25)
#'
#'
#' # Add ggplot layers to improve the plot's aesthetic
#'
#' swim_plot_with_arrows+
#' ggplot2::scale_color_manual(name="Response",values=c("grey20","grey80"))+
#' ggplot2::scale_fill_manual(name="Treatment",values=c("#e41a1c", "#377eb8","#4daf4a"))+
#' ggplot2::ylab('Time (Days)')+
#' ggplot2::guides(fill = ggplot2::guide_legend(override.aes = list(shape =
#' NA)))+
#' ggplot2::scale_shape_manual(name='',values=c(17,15),breaks =
#' c('Response_start','Response_end'),labels=c('Response Start','Response End'))
#'
#'
#'@export
swimmer_arrows <- function(df_arrows,id='id',arrow_start='end',cont=NULL,adj.y=0,name_col=NULL,arrow_positions=c(0.1,1),angle=30,
length = 0.1,type='closed',...){
df_arrows[,name_col] <- factor(df_arrows[,name_col])
if(!is.null(cont)){
df_arrows <- df_arrows[!is.na(df_arrows[,cont]),]
}
df_arrows[,id] <- as.character(df_arrows[,id])
df_arrows$start <- df_arrows[,arrow_start] + arrow_positions[1]
df_arrows$end <- df_arrows[,arrow_start] + arrow_positions[2]
plot.arrow <-
ggplot2::geom_segment(
data = df_arrows,
ggplot2::aes_string(
x = id,
xend = id,
y = 'start',
yend = 'end',
col = name_col
),arrow=ggplot2::arrow(angle = angle, length = ggplot2::unit(length, "inches"),
type = type),position = ggplot2::position_nudge(x = adj.y, y = 0),...)
return(plot.arrow)
}
# swimmer_text ------------------------------------------------------------
#' Adding text to a swimmers plot
#'
#' This function allows you to add text to a swimmers plot created with \code{\link{swimmer_plot}}
#' @param df_text a data frame
#' @param id  column name for id, default is 'id'
#' @param start column name with the text start locations (if there is no start column will default 0 for all text)
#' @param adj.y amount to adjust the text within the box vertically (default is 0, text is in the centre of each bar)
#' @param adj.x amount to adjust the text within the box horizontally (default is 0, text starts at the origin)
#' @param label a column with the text to be added to the plot
#' @param name_col a column name to map the text colour
#' @param name_size a column name to map the text size
#' @param name_alpha a column name to map the text transparency
#' @param name_fontface a column name to map the text fontface ("plain", "bold", "italic", "bold.italic" can all be used)
#' @param ... additional geom_text() arguments
#' @return a swimmer plot with text on the bars
#' @seealso  \code{\link{swimmer_plot}} \code{\link{swimmer_points}} \code{\link{swimmer_lines}}  \code{\link{swimmer_points_from_lines}} \code{\link{swimmer_arrows}}
#' @examples
#' #Start with a base swimmer plot
#'
#' swim_plot <-
#'  swimmer_plot(df=ClinicalTrial.Arm,id='id',end='End_trt',
#'  name_fill='Arm',col="black",id_order='Arm',alpha=0.6)
#'
#'
#' # Then add text to the plot
#'
#'
#'
#' swim_plot_with_text <- swim_plot +   swimmer_text(df_text =
#'ClinicalTrial.Stage,label = 'Stage',size=3,
#'fontface=ifelse(ClinicalTrial.Stage$Stage=="Early Stage","bold","plain"))
#'
#'
#' # Add ggplot layers to improve the plot's aesthetic
#'
#' swim_plot_with_text +
#' ggplot2::scale_fill_manual(name="Treatment",values=c("#e41a1c", "#377eb8","#4daf4a"))+
#' ggplot2::ylab('Time (Days)')
#'
#' @export
>>>>>>> main
swimmer_text <- function(df_text,id='id',start='start',label='label',name_col=NULL,name_size=NULL,
name_alpha=NULL,name_fontface=NULL,adj.y=0,adj.x=0,...){
if(!start %in% colnames(df_text))  df_text[,start] <- 0
df_text[,id] <- as.character(df_text[,id])
plot.lines <-
ggplot2::geom_text(
data = df_text,
ggplot2::aes_string(
label=label,
x = id,
y = start,
col = name_col,
size = name_size,
alpha = name_alpha,
fontface =name_fontface
),hjust=0,position = ggplot2::position_nudge(x = adj.y, y = adj.x),...
)
return(plot.lines)
}
swimmer_arrows
AE_plot+
swimmer_arrows(df_arrows=ClinicalTrial.Arm,id='id',arrow_start='End_trt',
cont = 'Continued_treatment',name_col='Arm',type =
"open",cex=1,adj.y=3)
AE_plot+
swimmer_arrows(df_arrows=ClinicalTrial.Arm,id='id',arrow_start='End_trt',
cont = 'Continued_treatment',name_col='Arm',type =
"open",cex=1,adj.y=0.1)
AE_plot+
swimmer_arrows(df_arrows=ClinicalTrial.Arm,id='id',arrow_start='End_trt',
cont = 'Continued_treatment',name_col='Arm',type =
"open",cex=1,adj.y=0.5)
AE_plot+
swimmer_arrows(df_arrows=ClinicalTrial.Arm,id='id',arrow_start='End_trt',
cont = 'Continued_treatment',name_col='Arm',type =
"open",cex=1,adj.y=-0.5)
AE_plot+
swimmer_arrows(df_arrows=ClinicalTrial.Arm,id='id',arrow_start='End_trt',
cont = 'Continued_treatment',name_col='Arm',type =
"open",cex=1,adj.y=-0.5)+AE_plot+
swimmer_arrows(df_arrows=ClinicalTrial.Arm,id='id',arrow_start='End_trt',
cont = 'Continued_treatment',name_col='Arm',type =
"open",cex=1,adj.y=0.5)
AE_plot+
swimmer_arrows(df_arrows=ClinicalTrial.Arm,id='id',arrow_start='End_trt',
cont = 'Continued_treatment',name_col='Arm',type =
"open",cex=1,adj.y=-0.5)+
swimmer_arrows(df_arrows=ClinicalTrial.Arm,id='id',arrow_start='End_trt',
cont = 'Continued_treatment',name_col='Arm',type =
"open",cex=1,adj.y=0.5)
spelling::spell_check_package()
devtools::document()
spelling::spell_check_package()
devtools::load_all()
library(ggplot2)
swimmer_plot(df=ClinicalTrial.Arm,id='id',end='End_trt',fill='lightblue',width=.85)
swimmer_plot(df=ClinicalTrial.Arm,id='id',end='End_trt',name_fill='Arm',
id_order='Arm',col="black",alpha=0.75,width=.8)
arm_plot
swimmer_plot(df=ClinicalTrial.Arm,id='id',end='End_trt',name_fill='Arm',
id_order='Arm',col="black",alpha=0.75,width=.8)
swimmer_plot(df=ClinicalTrial.Arm,id='id',end='End_trt',name_fill='Arm',name_alpha = 'Arm',
id_order='Arm',col="black",alpha=0.75,width=.8)
swimmer_plot(df=ClinicalTrial.Arm,id='id',end='End_trt',name_fill='Arm',name_alpha = 'Arm',
id_order='Arm',col="black",width=.8)
swimmer_plot(df=ClinicalTrial.Arm,id='id',end='End_trt',name_alpha = 'Arm',
id_order='Arm',col="black",width=.8)
devtools::build_manual()
devtools::build()
<<<<<<< HEAD
library(ggplot2)
library(ggpattern)
unloadNamespace("ggpattern")
unloadNamespace("ggplot2")
df <- data.frame(level = c('a','b','c','d'), outcome = c(2.3, 1.9, 3.2, 1))
ggplot2::ggplot(df) +
ggpattern::geom_col_pattern(
ggplot2::aes(level, outcome,fill=level,pattern_fill=level))
unloadNamespace("ggpattern")
library(ggpattern)
ggplot2::ggplot(df) +
ggpattern::geom_col_pattern(
ggplot2::aes(level, outcome,fill=level,pattern_fill=level))
a <- ggplot2::ggplot(df) +
ggpattern::geom_col_pattern(
ggplot2::aes(level, outcome,fill=level,pattern_fill=level))
summary(a)
unloadNamespace("ggpattern")
a <- ggplot2::ggplot(df) +
ggpattern::geom_col_pattern(
ggplot2::aes(level, outcome,fill=level,pattern_fill=level))
summary(a)
a
b <- ggplot2::ggplot(df) +
ggpattern::geom_col_pattern(
ggplot2::aes(level, outcome,fill=level,pattern_fill=level))
summary(a)
b
library(ggpattern)
a <- ggplot2::ggplot(df) +
ggpattern::geom_col_pattern(
ggplot2::aes(level, outcome,fill=level,pattern_fill=level))
a
b
b
ggpattern::b
ggplot(b)
a
unloadNamespace("ggpattern")
a
print(a)
ggpattern::print(a)
unloadNamespace("ggpattern")
print(a)
library(ggpattern)
print(a)
?print
base::print(a)
base::print(a)
a
a
d <- data.frame(id=c(1,2,3,4,5,6,6,6),end=c(1,2,3,4,5,2,4,6),treatment=c('a','b','ab','a','ab','b','ab','a'))
d$treatment <- factor(d$treatment)
swim_plot_pattern(df=d,name_fill = 'treatment',name_pattern='treatment',name_pattern_fill = 'treatment',col='black',pattern_density=0.5)+
ggpattern::scale_pattern_manual(values =c(a='none',ab='stripe',b='none'),breaks = c('a','b','ab'))+
ggpattern::scale_pattern_fill_manual(values=c(a='pink',ab='pink',b='lightblue')) +
scale_fill_manual(values=c(a='pink',ab='lightblue',b='lightblue'),breaks=c('a','b'))+
guides(fill = guide_legend(override.aes = list(pattern = 'none')),pattern=F,pattern_fill=F)
swim_plot_pattern <- function(df,id='id',end='end',name_fill=NULL,name_col=NULL,name_pattern=NULL,name_pattern_fill=NULL,id_order = 'increasing',stratify=FALSE,base_size=11,...)
{
df[,id] <- as.character(df[,id])
max_time <- stats::aggregate(df[,end], by = list(df[,id]), max)
names(max_time) <- c(id,end)
if (id_order[1] == 'increasing') {
id_order <-  suppressMessages(unlist(c(df %>%
dplyr::group_by(!!dplyr::sym(id))  %>%
dplyr::summarise(max_time=max(!!dplyr::sym(end)))  %>%
dplyr::arrange(max_time)  %>%
dplyr::select(!!dplyr::sym(id)))))
}
if (id_order[1] == 'decreasing') {
id_order <-  suppressMessages(unlist(c(df %>%
dplyr::group_by(!!dplyr::sym(id))  %>%
dplyr::summarise(max_time=max(!!dplyr::sym(end)))  %>%
dplyr::arrange(dplyr::desc(max_time))  %>%
dplyr::select(!!dplyr::sym(id)))))
}
if (id_order[1] %in% names(df)) {
id_order <- suppressMessages(unlist(c(df %>%
dplyr::group_by(!!dplyr::sym(id))  %>%
dplyr::mutate(max_time=max(!!dplyr::sym(end))) %>%
dplyr::top_n(-1,!!dplyr::sym(end))%>%
dplyr::arrange( dplyr::desc(!!dplyr::sym(id_order)),max_time) %>%
dplyr::select(!!dplyr::sym(id)))))
}
start = 'starting_bars_variable'
df <- df %>%
dplyr::arrange(!!dplyr::sym(id),!!dplyr::sym(end)) %>%
dplyr::group_by(!!dplyr::sym(id))%>%
dplyr::mutate(temporary_end=!!dplyr::sym(end)-dplyr::lag(!!dplyr::sym(end)))%>%
dplyr::mutate(starting_bars_variable= dplyr::lag(!!dplyr::sym(end)))%>%
dplyr::mutate(!!dplyr::sym(end):=ifelse(is.na(temporary_end),!!dplyr::sym(end),temporary_end))%>%
dplyr::mutate(starting_bars_variable=ifelse(is.na(starting_bars_variable),0,starting_bars_variable))%>%
dplyr::select(-temporary_end)
# if(is.null(name_fill) & is.null(name_col)) {
#   df <- max_time
#   df[,start] <- 0
#
# }
=======
if(!is.null(id_order)) {
if(id_order[1] %in% c("increasing",'decreasing')){
warning("Increasing/decreasing have been deprecated as options for id_order use increasing=TRUE or increasing=FALSE instead",
call. = FALSE)
if(id_order[1]=="increasing") increasing = TRUE
if(id_order[1]=="decreasing") increasing = FALSE
id_order = NULL
}
}
df[,id] <- as.character(df[,id])
if(is.null(id_order)){
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
if(increasing) {id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID),id]
}else id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID,decreasing = T),id]
}
if (id_order[1] %in% names(df)) {
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
merged_df_with_max <- merge(max_df,df,all=F)
starting_df <-  stats::aggregate(df[,end]~df[,id],FUN=min,na.rm=T)
names(starting_df) <- c(id,end)
starting_information <- merge(starting_df,merged_df_with_max,all=F)
if(increasing) {id_order <- starting_information[order(starting_information[,id_order[1]], -rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}else id_order <- starting_information[order(starting_information[,id_order[1]], rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}
df <- df[order(df[,id],df[,end]),]
##Filling in any gaps (Adding empty bars at 0 and between sections)
if(start %in% names(df)){
##Checking there are not overlapping sections
add_in <- function(id_fix,df,start,end){
df_fix <- df[df[,id]==id_fix,]
end_blank <- df_fix[,start][c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
start_blank <- c(0,dplyr::lag(df_fix[,end])[-1])[c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
df_fixed <- data.frame(id_fix,start_blank,end_blank)
names(df_fixed) <- c(id,start,end)
merge(df_fixed,df_fix,all=T)
}
df <- do.call(rbind.data.frame,sapply(unique(df[,id]), add_in,df=df,start=start,end=end,simplify = F))
}else {
start = 'starting_bars_variable'
df$starting_bars_variable <- stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df$starting_bars_variable[is.na(df$starting_bars_variable)] <- 0
}
temp_end <- df[,end] - stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df[,end][!is.na(temp_end)] <- temp_end[!is.na(temp_end)]
df <- data.frame(df)
starting_times <- sort(unique(df[,start]),decreasing = TRUE)
df[,start] <- factor(df[,start],starting_times)
df[, id] <- factor(df[, id], levels = id_order)
plot <-
ggplot2::ggplot(df) +
ggplot2::geom_col(position = "stack",
ggplot2::aes_string(fill = name_fill,col = name_col,alpha=name_alpha, group = start,x = id, y = end),...) + ggplot2::coord_flip() +
ggplot2::theme_bw(base_size = base_size) +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank(),panel.grid.major = ggplot2::element_blank())
if(stratify[1]!=FALSE) plot <-  plot + ggplot2::facet_wrap(stats::as.formula(paste("~",paste(stratify,collapse = "+"))),scales = "free_y")+
ggplot2::theme(strip.background = ggplot2::element_rect(colour="black", fill="white"))
if(identifiers==FALSE) plot <-  plot + ggplot2::theme(axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())
return(plot)
}
test_data <- data.frame(id=c(1,1,1,2),start=c(0,2,4,3),end=c(2,3,4,5),group=c('A','C','A','B'))
swimmer_plot(test_data,name_fill = 'group')
test_data
test_data <- data.frame(id=c(1,1,1,2),start=c(0,2,4,3),end=c(2,3,7,5),group=c('A','C','A','B'))
swimmer_plot(test_data,name_fill = 'group')
test_data <- data.frame(id=c(1,1,1,2,1),start=c(0,2,4,3,1.5),end=c(2,3,7,5,2),group=c('A','C','A','B'))
test_data <- data.frame(id=c(1,1,1,2,1),start=c(0,2,4,3,1.5),end=c(2,3,7,5,2),group=c('A','C','A','B','B'))
swimmer_plot(test_data,name_fill = 'group')
start='start'
end='end'
id='id'
id='id'
start='start'
df =test_data
data
df <- data.frame(id=c(1,1,1,2,1),start=c(0,2,4,3,1.5),end=c(2,3,7,5,2),group=c('A','C','A','B','B'))
df
id
end
start
unlist(sapply(unique(treatment_data$id), check_for_overlap,start=start,end=end,data=df,id=id))
##Checking there are not overlapping sections
check_for_overlap <- function(data,id,start,end,x){
single <- data[data[,id]==x,]
if(dim(single)[1]>1){
single <- single[order(single[,start]),]
check_val <- min(single[,start]-dplyr::lag(single[,end]),na.rm = T)
if(check_val<0) return(x)
}
}
unlist(sapply(unique(treatment_data$id), check_for_overlap,start=start,end=end,data=df,id=id))
unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
df <- data.frame(id=c(1,1,1,2),start=c(0,2,4,3),end=c(2,3,7,5),group=c('A','C','A','B'))
unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
length(unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id)))
overlap <- unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
length(overlap)
paste0("Error:there are", length(overlap),"ids with overlap between bars, they are","(",overlap,")")
paste("Error:there are", length(overlap),"ids with overlap between bars, they are","(",overlap,")")
paste("Error:there are", length(overlap),"ids with overlap between bars, they are (",overlap,")")
df <- data.frame(id=c(1,1,1,2,1),start=c(0,2,4,3,1.5),end=c(2,3,7,5,2),group=c('A','C','A','B','B'))
overlap <- unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
paste("Error:there are", length(overlap),"ids with overlap between bars, they are (",overlap,")")
df <- data.frame(id=c(1,1,1,2,1,2),start=c(0,2,4,3,2,1.5),end=c(2,3,7,5,4,2),group=c('A','C','A','B','B'))
df <- data.frame(id=c(1,1,1,2,1,2),start=c(0,2,4,3,2,1.5),end=c(2,3,7,5,4,2),group=c('A','C','A','B','H','B'))
overlap <- unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
paste("Error:there is", length(overlap),"ids with overlap between bars, they are (",overlap,")")
df
df <- data.frame(id=c(1,1,1,2,1,2),start=c(0,2,4,3,2,1.5),end=c(2,3,7,5,4,5),group=c('A','C','A','B','H','B'))
overlap <- unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
overlap
paste (overlap,sep="", collapse=",")
paste("Error:there is", length(overlap),"ids with overlap between bars, they are (",paste (overlap,sep="", collapse=","),")")
paste0("Error:there is", length(overlap),"ids with overlap between bars, they are (",paste (overlap,sep="", collapse=","),")")
paste0("Error:there is(are)", length(overlap),"id(s) with overlap between bars, they are (",paste (overlap,sep="", collapse=","),")")
paste0("Error:there is(are) ", length(overlap)," id(s) with overlap between bars, they are (",paste (overlap,sep="", collapse=","),")")
paste0("Error:there is(are) ", length(overlap)," id(s) with overlap between bars, they are",id ,"=(",paste (overlap,sep="", collapse=","),")")
paste0("Error:there is(are) ", length(overlap)," id(s) with overlap between bars, they are ",id ,"=(",paste (overlap,sep="", collapse=","),")")
swimmer_plot <- function(df,id='id',end='end',start='start',name_fill=NULL,name_col=NULL,name_alpha=NULL,increasing=TRUE,id_order = NULL,
stratify=FALSE,base_size=11,identifiers=TRUE,...)
{
#Check deprecated id_order = increasing or decreasing
if(!is.null(id_order)) {
if(id_order[1] %in% c("increasing",'decreasing')){
warning("Increasing/decreasing have been deprecated as options for id_order use increasing=TRUE or increasing=FALSE instead",
call. = FALSE)
if(id_order[1]=="increasing") increasing = TRUE
if(id_order[1]=="decreasing") increasing = FALSE
id_order = NULL
}
}
df[,id] <- as.character(df[,id])
if(is.null(id_order)){
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
if(increasing) {id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID),id]
}else id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID,decreasing = T),id]
}
if (id_order[1] %in% names(df)) {
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
merged_df_with_max <- merge(max_df,df,all=F)
starting_df <-  stats::aggregate(df[,end]~df[,id],FUN=min,na.rm=T)
names(starting_df) <- c(id,end)
starting_information <- merge(starting_df,merged_df_with_max,all=F)
if(increasing) {id_order <- starting_information[order(starting_information[,id_order[1]], -rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}else id_order <- starting_information[order(starting_information[,id_order[1]], rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}
df <- df[order(df[,id],df[,end]),]
##Filling in any gaps (Adding empty bars at 0 and between sections)
if(start %in% names(df)){
##Checking there are not overlapping sections
check_for_overlap <- function(data,id,start,end,x){
single <- data[data[,id]==x,]
if(dim(single)[1]>1){
single <- single[order(single[,start]),]
check_val <- min(single[,start]-dplyr::lag(single[,end]),na.rm = T)
if(check_val<0) return(x)
}
}
overlap <- unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
if(length(overlap)>0) {stop(paste0(    paste0("Error:there is(are) ", length(overlap)," id(s) with overlap between bars, they are ",id ,"=(",paste (overlap,sep="", collapse=","),")")))}
add_in <- function(id_fix,df,start,end){
df_fix <- df[df[,id]==id_fix,]
end_blank <- df_fix[,start][c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
start_blank <- c(0,dplyr::lag(df_fix[,end])[-1])[c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
df_fixed <- data.frame(id_fix,start_blank,end_blank)
names(df_fixed) <- c(id,start,end)
merge(df_fixed,df_fix,all=T)
}
df <- do.call(rbind.data.frame,sapply(unique(df[,id]), add_in,df=df,start=start,end=end,simplify = F))
}else {
start = 'starting_bars_variable'
df$starting_bars_variable <- stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df$starting_bars_variable[is.na(df$starting_bars_variable)] <- 0
}
temp_end <- df[,end] - stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df[,end][!is.na(temp_end)] <- temp_end[!is.na(temp_end)]
df <- data.frame(df)
starting_times <- sort(unique(df[,start]),decreasing = TRUE)
df[,start] <- factor(df[,start],starting_times)
df[, id] <- factor(df[, id], levels = id_order)
plot <-
ggplot2::ggplot(df) +
ggplot2::geom_col(position = "stack",
ggplot2::aes_string(fill = name_fill,col = name_col,alpha=name_alpha, group = start,x = id, y = end),...) + ggplot2::coord_flip() +
ggplot2::theme_bw(base_size = base_size) +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank(),panel.grid.major = ggplot2::element_blank())
if(stratify[1]!=FALSE) plot <-  plot + ggplot2::facet_wrap(stats::as.formula(paste("~",paste(stratify,collapse = "+"))),scales = "free_y")+
ggplot2::theme(strip.background = ggplot2::element_rect(colour="black", fill="white"))
if(identifiers==FALSE) plot <-  plot + ggplot2::theme(axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())
return(plot)
}
df <- data.frame(id=c(1,1,1,2),start=c(0,2,4,3),end=c(2,3,7,5),group=c('A','C','A','B'))
swimmer_plot(test_data,name_fill = 'group')
df <- data.frame(id=c(1,1,1),start=c(0,2,4),end=c(2,3,7),group=c('A','C','A'))
swimmer_plot(test_data,name_fill = 'group')
df
overlap <- unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
overlap
length(overlap)
df <- data.frame(id=c(1,1,1),start=c(0,2,4),end=c(2,3,7),group=c('A','C','A'))
swimmer_plot(df,name_fill = 'group')
df <- data.frame(id=c(1,1,1,2,1,2),start=c(0,2,4,3,2,1.5),end=c(2,3,7,5,4,5),group=c('A','C','A','B','H','B'))
swimmer_plot(df,name_fill = 'group')
df <- data.frame('name'=c('Jess','Jess','Jess','TT','Jess','TT'),begining=c(0,2,4,3,2,1.5),stop=c(2,3,7,5,4,5),group=c('A','C','A','B','H','B'))
swimmer_plot(df,name_fill = 'group',id=,end=,start=)
swimmer_plot(df,name_fill = 'group',id='name',end='stop',start='begining')
swimmer_plot <- function(df,id='id',end='end',start='start',name_fill=NULL,name_col=NULL,name_alpha=NULL,increasing=TRUE,id_order = NULL,
stratify=FALSE,base_size=11,identifiers=TRUE,...)
{
#Check deprecated id_order = increasing or decreasing
if(!is.null(id_order)) {
if(id_order[1] %in% c("increasing",'decreasing')){
warning("Increasing/decreasing have been deprecated as options for id_order use increasing=TRUE or increasing=FALSE instead",
call. = FALSE)
if(id_order[1]=="increasing") increasing = TRUE
if(id_order[1]=="decreasing") increasing = FALSE
id_order = NULL
}
}
df[,id] <- as.character(df[,id])
if(is.null(id_order)){
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
if(increasing) {id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID),id]
}else id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID,decreasing = T),id]
}
if (id_order[1] %in% names(df)) {
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
merged_df_with_max <- merge(max_df,df,all=F)
starting_df <-  stats::aggregate(df[,end]~df[,id],FUN=min,na.rm=T)
names(starting_df) <- c(id,end)
starting_information <- merge(starting_df,merged_df_with_max,all=F)
if(increasing) {id_order <- starting_information[order(starting_information[,id_order[1]], -rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}else id_order <- starting_information[order(starting_information[,id_order[1]], rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}
df <- df[order(df[,id],df[,end]),]
##Filling in any gaps (Adding empty bars at 0 and between sections)
if(start %in% names(df)){
##Checking there are not overlapping sections
check_for_overlap <- function(data,id,start,end,x){
single <- data[data[,id]==x,]
if(dim(single)[1]>1){
single <- single[order(single[,start]),]
check_val <- min(single[,start]-dplyr::lag(single[,end]),na.rm = T)
if(check_val<0) return(x)
}
}
overlap <- unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
if(length(overlap)>0) {stop(paste0(    paste0("There is(are) ", length(overlap)," id(s) with overlap between bars, they are ",id ,"=(",paste (overlap,sep="", collapse=","),")")))}
add_in <- function(id_fix,df,start,end){
df_fix <- df[df[,id]==id_fix,]
end_blank <- df_fix[,start][c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
start_blank <- c(0,dplyr::lag(df_fix[,end])[-1])[c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
df_fixed <- data.frame(id_fix,start_blank,end_blank)
names(df_fixed) <- c(id,start,end)
merge(df_fixed,df_fix,all=T)
}
df <- do.call(rbind.data.frame,sapply(unique(df[,id]), add_in,df=df,start=start,end=end,simplify = F))
}else {
start = 'starting_bars_variable'
df$starting_bars_variable <- stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df$starting_bars_variable[is.na(df$starting_bars_variable)] <- 0
}
temp_end <- df[,end] - stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df[,end][!is.na(temp_end)] <- temp_end[!is.na(temp_end)]
>>>>>>> develop
df <- data.frame(df)
starting_times <- sort(unique(df[,start]),decreasing = TRUE)
df[,start] <- factor(df[,start],starting_times)
df[, id] <- factor(df[, id], levels = id_order)
plot <-
ggplot2::ggplot(df) +
<<<<<<< HEAD
ggpattern::geom_col_pattern(position = "stack",
ggplot2::aes_string(fill = name_fill,col = name_col,pattern=name_pattern,pattern_fill=name_pattern_fill, group = start,x = id, y = end),...) + ggplot2::coord_flip() +
=======
ggplot2::geom_col(position = "stack",
ggplot2::aes_string(fill = name_fill,col = name_col,alpha=name_alpha, group = start,x = id, y = end),...) + ggplot2::coord_flip() +
>>>>>>> develop
ggplot2::theme_bw(base_size = base_size) +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank(),panel.grid.major = ggplot2::element_blank())
if(stratify[1]!=FALSE) plot <-  plot + ggplot2::facet_wrap(stats::as.formula(paste("~",paste(stratify,collapse = "+"))),scales = "free_y")+
ggplot2::theme(strip.background = ggplot2::element_rect(colour="black", fill="white"))
<<<<<<< HEAD
return(plot)
}
d <- data.frame(id=c(1,2,3,4,5,6,6,6),end=c(1,2,3,4,5,2,4,6),treatment=c('a','b','ab','a','ab','b','ab','a'))
d$treatment <- factor(d$treatment)
swim_plot_pattern(df=d,name_fill = 'treatment',name_pattern='treatment',name_pattern_fill = 'treatment',col='black',pattern_density=0.5)+
ggpattern::scale_pattern_manual(values =c(a='none',ab='stripe',b='none'),breaks = c('a','b','ab'))+
ggpattern::scale_pattern_fill_manual(values=c(a='pink',ab='pink',b='lightblue')) +
scale_fill_manual(values=c(a='pink',ab='lightblue',b='lightblue'),breaks=c('a','b'))+
guides(fill = guide_legend(override.aes = list(pattern = 'none')),pattern=F,pattern_fill=F)
library(dplyr)
swim_plot_pattern(df=d,name_fill = 'treatment',name_pattern='treatment',name_pattern_fill = 'treatment',col='black',pattern_density=0.5)+
ggpattern::scale_pattern_manual(values =c(a='none',ab='stripe',b='none'),breaks = c('a','b','ab'))+
ggpattern::scale_pattern_fill_manual(values=c(a='pink',ab='pink',b='lightblue')) +
scale_fill_manual(values=c(a='pink',ab='lightblue',b='lightblue'),breaks=c('a','b'))+
guides(fill = guide_legend(override.aes = list(pattern = 'none')),pattern=F,pattern_fill=F)
library(ggplot2)
swim_plot_pattern(df=d,name_fill = 'treatment',name_pattern='treatment',name_pattern_fill = 'treatment',col='black',pattern_density=0.5)+
ggpattern::scale_pattern_manual(values =c(a='none',ab='stripe',b='none'),breaks = c('a','b','ab'))+
ggpattern::scale_pattern_fill_manual(values=c(a='pink',ab='pink',b='lightblue')) +
scale_fill_manual(values=c(a='pink',ab='lightblue',b='lightblue'),breaks=c('a','b'))+
guides(fill = guide_legend(override.aes = list(pattern = 'none')),pattern=F,pattern_fill=F)
devtools::document()
devtools::document()
devtools::document()
rm(list = c("swim_plot_pattern")
)
devtools::build()
library(swimplot)
remove.packages("swimplot", lib="~/R/R-4.0.2/library")
=======
devtools::release_checks()
devtools::release()
spell_check()
devtools:spell_check()
devtools::spell_check()
devtools::release()
devtools::release()
check_rhub()
devtools::check_rhub()
devtools::release()
check_win_devel()
devtools::check_win_devel()
devtools::release()
devtools::install_github("Dschaykib/newsmd")
my_news <- news$new()
my_news <- newsmd()
library(newsmd)
my_news <- news$new()
my_news <- newsmd()
util::news():
util::news()
usethis::use_news_md()
devtools::release()
devtools::spell_check()
devtools::release()
use_cran_comments()
usethis::use_cran_comments()
devtools::release()
devtools::release()
>>>>>>> main
devtools::document()
library(ggpattern)
library(ggplot2)
df <- data.frame(id=c(1,2,3,4,5,6,6,6),
Treatment = c('a','b','a&b','a','a&b','b','a&b','a'),
end=c(1,2,3,4,5,2,4,6))
end=c(1,2,3,4,5,2,4,6))
end=c(1,2,3,4,5,2,4,6))
df <- data.frame(id=c(1,2,3,4,5,6,6,6),
Treatment = c('a','b','a&b','a','a&b','b','a&b','a'),
end=c(1,2,3,4,5,2,4,6))
swim_plot_pattern <- function(df,id='id',end='end',start='start',name_fill=NULL,name_col=NULL,name_alpha=NULL,increasing=TRUE,id_order = NULL,
=======
if(identifiers==FALSE) plot <-  plot + ggplot2::theme(axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())
return(plot)
}
df <- data.frame(id=c(1,1,1),start=c(0,2,4),end=c(2,3,7),group=c('A','C','A'))
swimmer_plot(df,name_fill = 'group',id='name',end='stop',start='begining')
df <- data.frame('name'=c('Jess','Jess','Jess','TT','Jess','TT'),begining=c(0,2,4,3,2,1.5),stop=c(2,3,7,5,4,5),group=c('A','C','A','B','H','B'))
swimmer_plot(df,name_fill = 'group',id='name',end='stop',start='begining')
##Removing rows that start before 0
data[,id][data[,start]]<0
##Removing rows that start before 0
df[,id][df[,start]]<0
df[,id]
id
df <- data.frame(id=c(1,1,1),start=c(0,2,4),end=c(2,3,7),group=c('A','C','A'))
df <- data.frame(id=c(1,1,1,2),start=c(0,2,4,-1),end=c(2,3,7,6),group=c('A','C','A'))
df <- data.frame(id=c(1,1,1,2),start=c(0,2,4,-1),end=c(2,3,7,6),group=c('A','C','A','S'))
swimmer_plot(df,name_fill = 'group',id='name',end='stop',start='begining')
swimmer_plot(df,name_fill = 'group')
##Removing rows that start before 0
df[,id][df[,start]]<0
df[,id]
df[,start]<0
##Removing rows that start before 0
df[,id][df[,start]<0]
if(length(negative_start)>0) {stop(paste0(    paste0("There is(are) ", length(overlap)," id(s) that have negative start times",id ,"=(",paste (negative_start,sep="", collapse=","),")")))}
##Removing rows that start before 0
negative_start <- df[,id][df[,start]<0]
if(length(negative_start)>0) {stop(paste0(    paste0("There is(are) ", length(overlap)," id(s) that have negative start times",id ,"=(",paste (negative_start,sep="", collapse=","),")")))}
if(length(negative_start)>0) {stop(paste0(    paste0("There is(are) ", length(negative_start)," id(s) that have negative start times",id ,"=(",paste (negative_start,sep="", collapse=","),")")))}
if(length(negative_start)>0) {stop(paste0(    paste0("There is(are) ", length(negative_start)," id(s) that have negative start times ",id ,"=(",paste (negative_start,sep="", collapse=","),")")))}
swimmer_plot <- function(df,id='id',end='end',start='start',name_fill=NULL,name_col=NULL,name_alpha=NULL,increasing=TRUE,id_order = NULL,
>>>>>>> develop
stratify=FALSE,base_size=11,identifiers=TRUE,...)
{
#Check deprecated id_order = increasing or decreasing
if(!is.null(id_order)) {
if(id_order[1] %in% c("increasing",'decreasing')){
warning("Increasing/decreasing have been deprecated as options for id_order use increasing=TRUE or increasing=FALSE instead",
call. = FALSE)
if(id_order[1]=="increasing") increasing = TRUE
if(id_order[1]=="decreasing") increasing = FALSE
id_order = NULL
}
}
df[,id] <- as.character(df[,id])
if(is.null(id_order)){
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
if(increasing) {id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID),id]
}else id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID,decreasing = T),id]
}
if (id_order[1] %in% names(df)) {
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
merged_df_with_max <- merge(max_df,df,all=F)
starting_df <-  stats::aggregate(df[,end]~df[,id],FUN=min,na.rm=T)
names(starting_df) <- c(id,end)
starting_information <- merge(starting_df,merged_df_with_max,all=F)
if(increasing) {id_order <- starting_information[order(starting_information[,id_order[1]], -rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}else id_order <- starting_information[order(starting_information[,id_order[1]], rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}
df <- df[order(df[,id],df[,end]),]
##Filling in any gaps (Adding empty bars at 0 and between sections)
if(start %in% names(df)){
<<<<<<< HEAD
=======
##Removing rows that start before 0
negative_start <- df[,id][df[,start]<0]
if(length(negative_start)>0) {stop(paste0(    paste0("There is(are) ", length(negative_start)," id(s) that have negative start times ",id ,"=(",paste (negative_start,sep="", collapse=","),")")))}
##Checking there are not overlapping sections
check_for_overlap <- function(data,id,start,end,x){
single <- data[data[,id]==x,]
if(dim(single)[1]>1){
single <- single[order(single[,start]),]
check_val <- min(single[,start]-dplyr::lag(single[,end]),na.rm = T)
if(check_val<0) return(x)
}
}
overlap <- unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
if(length(overlap)>0) {stop(paste0(    paste0("There is(are) ", length(overlap)," id(s) with overlap between bars, they are ",id ,"=(",paste (overlap,sep="", collapse=","),")")))}
>>>>>>> develop
add_in <- function(id_fix,df,start,end){
df_fix <- df[df[,id]==id_fix,]
end_blank <- df_fix[,start][c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
start_blank <- c(0,dplyr::lag(df_fix[,end])[-1])[c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
df_fixed <- data.frame(id_fix,start_blank,end_blank)
names(df_fixed) <- c(id,start,end)
merge(df_fixed,df_fix,all=T)
}
df <- do.call(rbind.data.frame,sapply(unique(df[,id]), add_in,df=df,start=start,end=end,simplify = F))
}else {
start = 'starting_bars_variable'
df$starting_bars_variable <- stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df$starting_bars_variable[is.na(df$starting_bars_variable)] <- 0
}
temp_end <- df[,end] - stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df[,end][!is.na(temp_end)] <- temp_end[!is.na(temp_end)]
df <- data.frame(df)
starting_times <- sort(unique(df[,start]),decreasing = TRUE)
df[,start] <- factor(df[,start],starting_times)
df[, id] <- factor(df[, id], levels = id_order)
plot <-
ggplot2::ggplot(df) +
<<<<<<< HEAD
ggpattern::geom_col_pattern(position = "stack",
ggplot2::aes_string(fill = name_fill,col = name_col,pattern=name_pattern,pattern_fill=name_pattern_fill, group = start,x = id, y = end),...) + ggplot2::coord_flip() +
=======
ggplot2::geom_col(position = "stack",
ggplot2::aes_string(fill = name_fill,col = name_col,alpha=name_alpha, group = start,x = id, y = end),...) + ggplot2::coord_flip() +
>>>>>>> develop
ggplot2::theme_bw(base_size = base_size) +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank(),panel.grid.major = ggplot2::element_blank())
if(stratify[1]!=FALSE) plot <-  plot + ggplot2::facet_wrap(stats::as.formula(paste("~",paste(stratify,collapse = "+"))),scales = "free_y")+
ggplot2::theme(strip.background = ggplot2::element_rect(colour="black", fill="white"))
<<<<<<< HEAD
return(plot)
}
swim_plot_pattern(df = df,name_pattern = 'Treatment',name_pattern_fill = 'Treatment',
name_fill = 'Treatment',col='black',pattern_density=0.5)+
scale_pattern_manual(values = c('a'='none','b'='none','a&b'='stripe'))+
scale_pattern_fill_manual(values = c('a'='lightblue','b'='pink','a&b'='pink'),breaks = c('a','b'))+
scale_fill_manual(values = c('a'='lightblue','b'='pink','a&b'='lightblue'),breaks = c('a','b'))+
guides(fill = guide_legend(override.aes = list(pattern = 'none' )),pattern=FALSE)
swim_plot_pattern(df = df,name_pattern = 'Treatment',name_pattern_fill = 'Treatment',
name_fill = 'Treatment',col='black',pattern_density=0.5)
swim_plot_pattern <- function(df,id='id',end='end',start='start',name_fill=NULL,name_col=NULL,name_pattern=NULL,name_pattern_fill=NULL
,name_alpha=NULL,increasing=TRUE,id_order = NULL,
=======
if(identifiers==FALSE) plot <-  plot + ggplot2::theme(axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())
return(plot)
}
swimmer_plot(df,name_fill = 'group',id='name',end='stop',start='begining')
df <- data.frame(id=c(1,1,1,2),start=c(0,2,4,-1),end=c(2,3,7,6),group=c('A','C','A','S'))
swimmer_plot(df,name_fill = 'group')
install.packages('dlstats')
library("ggplot2")
library("dlstats")
x <- cran_stats(c("emojifont", "ggimage", "hexSticker", "rvcheck"))
if (!is.null(x)) {
head(x)
ggplot(x, aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))
}
cran_stats('swimplot')
?cran_stats
dlstats::cran_stats('swimplot')
a <- dlstats::cran_stats('swimplot')
a$downloads
sum(dlstats::cran_stats('swimplot')$downloads)
dlstats::cran_stats('hexSticker')
sum(dlstats::cran_stats('hexSticker')$downloads)
sum(dlstats::cran_stats('swimplot')$downloads)
dlstats::cran_stats('swimplot')
sum(dlstats::cran_stats('swimplot')$downloads)
swimmer_plot <- function(df,id='id',end='end',start='start',name_fill=NULL,name_col=NULL,name_alpha=NULL,increasing=TRUE,id_order = NULL,
>>>>>>> develop
stratify=FALSE,base_size=11,identifiers=TRUE,...)
{
#Check deprecated id_order = increasing or decreasing
if(!is.null(id_order)) {
if(id_order[1] %in% c("increasing",'decreasing')){
warning("Increasing/decreasing have been deprecated as options for id_order use increasing=TRUE or increasing=FALSE instead",
call. = FALSE)
if(id_order[1]=="increasing") increasing = TRUE
if(id_order[1]=="decreasing") increasing = FALSE
id_order = NULL
}
}
df[,id] <- as.character(df[,id])
if(is.null(id_order)){
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
if(increasing) {id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID),id]
}else id_order <-  max_df[order(max_df$MAX_TIME_FOR_EACH_ID,decreasing = T),id]
}
if (id_order[1] %in% names(df)) {
max_df <- stats::aggregate(df[,end]~df[,id],FUN=max,na.rm=T)
names(max_df) <- c(id,'MAX_TIME_FOR_EACH_ID')
merged_df_with_max <- merge(max_df,df,all=F)
starting_df <-  stats::aggregate(df[,end]~df[,id],FUN=min,na.rm=T)
names(starting_df) <- c(id,end)
starting_information <- merge(starting_df,merged_df_with_max,all=F)
if(increasing) {id_order <- starting_information[order(starting_information[,id_order[1]], -rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}else id_order <- starting_information[order(starting_information[,id_order[1]], rank(starting_information$MAX_TIME_FOR_EACH_ID), decreasing = TRUE),id]
}
df <- df[order(df[,id],df[,end]),]
##Filling in any gaps (Adding empty bars at 0 and between sections)
if(start %in% names(df)){
<<<<<<< HEAD
=======
##Removing rows that start before 0
negative_start <- df[,id][df[,start]<0]
if(length(negative_start)>0) {stop(paste0(    paste0("There is(are) ", length(negative_start)," id(s) that have negative start times ",id ,"=(",paste (negative_start,sep="", collapse=","),")")))}
##Checking there are not overlapping sections
check_for_overlap <- function(data,id,start,end,x){
single <- data[data[,id]==x,]
if(dim(single)[1]>1){
single <- single[order(single[,start]),]
check_val <- min(single[,start]-dplyr::lag(single[,end]),na.rm = T)
if(check_val<0) return(x)
}
}
overlap <- unlist(sapply(unique(df[,id]), check_for_overlap,start=start,end=end,data=df,id=id))
if(length(overlap)>0) {stop(paste0(    paste0("There is(are) ", length(overlap)," id(s) with overlap between bars, they are ",id ,"=(",paste (overlap,sep="", collapse=","),")")))}
>>>>>>> develop
add_in <- function(id_fix,df,start,end){
df_fix <- df[df[,id]==id_fix,]
end_blank <- df_fix[,start][c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
start_blank <- c(0,dplyr::lag(df_fix[,end])[-1])[c(0,dplyr::lag(df_fix[,end])[-1]) != df_fix[,start]]
df_fixed <- data.frame(id_fix,start_blank,end_blank)
names(df_fixed) <- c(id,start,end)
merge(df_fixed,df_fix,all=T)
}
df <- do.call(rbind.data.frame,sapply(unique(df[,id]), add_in,df=df,start=start,end=end,simplify = F))
}else {
start = 'starting_bars_variable'
df$starting_bars_variable <- stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df$starting_bars_variable[is.na(df$starting_bars_variable)] <- 0
}
temp_end <- df[,end] - stats::ave(df[,end], df[,id], FUN=dplyr::lag)
df[,end][!is.na(temp_end)] <- temp_end[!is.na(temp_end)]
df <- data.frame(df)
starting_times <- sort(unique(df[,start]),decreasing = TRUE)
df[,start] <- factor(df[,start],starting_times)
df[, id] <- factor(df[, id], levels = id_order)
plot <-
ggplot2::ggplot(df) +
<<<<<<< HEAD
ggpattern::geom_col_pattern(position = "stack",
ggplot2::aes_string(fill = name_fill,col = name_col,pattern=name_pattern,pattern_fill=name_pattern_fill, group = start,x = id, y = end),...) + ggplot2::coord_flip() +
=======
ggplot2::geom_col(position = "stack",
ggplot2::aes_string(fill = name_fill,col = name_col,alpha=name_alpha, group = start,x = id, y = end),...) + ggplot2::coord_flip() +
>>>>>>> develop
ggplot2::theme_bw(base_size = base_size) +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank(),panel.grid.major = ggplot2::element_blank())
if(stratify[1]!=FALSE) plot <-  plot + ggplot2::facet_wrap(stats::as.formula(paste("~",paste(stratify,collapse = "+"))),scales = "free_y")+
ggplot2::theme(strip.background = ggplot2::element_rect(colour="black", fill="white"))
<<<<<<< HEAD
return(plot)
}
swim_plot_pattern(df = df,name_pattern = 'Treatment',name_pattern_fill = 'Treatment',
name_fill = 'Treatment',col='black',pattern_density=0.5)+
scale_pattern_manual(values = c('a'='none','b'='none','a&b'='stripe'))+
scale_pattern_fill_manual(values = c('a'='lightblue','b'='pink','a&b'='pink'),breaks = c('a','b'))+
scale_fill_manual(values = c('a'='lightblue','b'='pink','a&b'='lightblue'),breaks = c('a','b'))+
guides(fill = guide_legend(override.aes = list(pattern = 'none' )),pattern=FALSE)
devtools::document()
rm(list = c("swim_plot_pattern"))
library(ggpattern)
remotes::install_github("coolbutuseless/ggpattern")
=======
if(identifiers==FALSE) plot <-  plot + ggplot2::theme(axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())
return(plot)
}
treatment_data$start_time[treatment_data$id==124 & treatment_data$treatment=="Alectinib"]
treatment_data$start_time[treatment_data$id==124 & treatment_data$treatment=="Alectinib"] = 0.08743169
load("T:/Dept Staff Members/Jessica/Projects/Lung group/Geoffrey Liu/Sierra/swimplot/treatment_data.RData")
treatment_data$start_time[treatment_data$id==124 & treatment_data$treatment=="Alectinib"]
treatment_data$start_time[treatment_data$id==124 & treatment_data$treatment=="Alectinib"] = 0.08743169
library(RColorBrewer)
swimmer_plot(df=treatment_data,id="id",name_fill="treatment",start="start_time",end="end_time", col=1) +
ggplot2::scale_fill_brewer(palette = "Set3",na.value=NA)
swimmer_plot(df=treatment_data[!treatment_data$id %in% 24,],id="id",name_fill="treatment",start="start_time",end="end_time", col=1) +
ggplot2::scale_fill_brewer(palette = "Set3",na.value=NA)
swimmer_plot(df=treatment_data[!treatment_data$id %in% c(24,119,124,38,72),],id="id",name_fill="treatment",start="start_time",end="end_time", col=1) +
ggplot2::scale_fill_brewer(palette = "Set3",na.value=NA)
>>>>>>> develop
